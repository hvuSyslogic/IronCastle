namespace javax.crypto.spec
{

	/// <summary>
	/// This class specifies the set of parameters used with the Diffie-Hellman
	/// algorithm, as specified in PKCS #3: <i>Diffie-Hellman Key-Agreement
	/// Standard</i>.
	/// <para>
	/// A central authority generates parameters and gives them to the two
	/// entities seeking to generate a secret key. The parameters are a prime
	/// <code>p</code>, a base <code>g</code>, and optionally the length
	/// in bits of the private value, <code>l</code>.
	/// </para>
	/// <para>
	/// It is possible that more than one instance of parameters may be
	/// generated by a given central authority, and that there may be more than
	/// one central authority. Indeed, each individual may be its own central
	/// authority, with different entities having different parameters.
	/// 
	/// </para>
	/// </summary>
	/// <seealso cref= javax.crypto.KeyAgreement </seealso>
	public class DHParameterSpec : AlgorithmParameterSpec
	{
		private BigInteger p;
		private BigInteger g;
		private int l;

		/// <summary>
		/// Constructs a parameter set for Diffie-Hellman, using a prime modulus
		/// <code>p</code> and a base generator <code>g</code>.
		/// </summary>
		/// <param name="p"> the prime modulus </param>
		/// <param name="g"> the base generator </param>
		public DHParameterSpec(BigInteger p, BigInteger g)
		{
			this.p = p;
			this.g = g;
		}

		/// <summary>
		/// Constructs a parameter set for Diffie-Hellman, using a prime modulus
		/// <code>p</code>, a base generator <code>g</code>, and the size in bits,
		/// <code>l</code>, of the random exponent (private value).
		/// </summary>
		/// <param name="p"> the prime modulus </param>
		/// <param name="g"> the base generator </param>
		/// <param name="l"> the size in bits of the random exponent (private value) </param>
		public DHParameterSpec(BigInteger p, BigInteger g, int l)
		{
			this.p = p;
			this.g = g;
			this.l = l;
		}

		/// <summary>
		/// Returns the prime modulus <code>p</code>.
		/// </summary>
		/// <returns> the prime modulus <code>p</code> </returns>
		public virtual BigInteger getP()
		{
			return p;
		}

		/// <summary>
		/// Returns the base generator <code>g</code>.
		/// </summary>
		/// <returns> the base generator <code>g</code> </returns>
		public virtual BigInteger getG()
		{
			return g;
		}

		/// <summary>
		/// Returns the size in bits, <code>l</code>, of the random exponent
		/// (private value).
		/// </summary>
		/// <returns> the size in bits, <code>l</code>, of the random exponent
		/// (private value), or 0 if this size has not been set </returns>
		public virtual int getL()
		{
			return l;
		}
	}

}